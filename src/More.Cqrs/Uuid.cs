// Copyright (c) Commonsense Software. All rights reserved.
// Licensed under the MIT license.

namespace More.Domain
{
    using System;
    using static System.Array;
    using static System.BitConverter;
    using static System.DateTime;
    using static System.Guid;
    using static System.Security.Cryptography.HashAlgorithmName;
    using static System.Security.Cryptography.IncrementalHash;
    using static System.String;
    using static System.Text.Encoding;
    using static System.TimeSpan;

    /// <summary>
    /// Provides methods for generating universally unique identifiers (UUID).
    /// </summary>
    public static partial class Uuid
    {
        const long TicksFromJanuarayFirst1900 = 599266080000000000L;
        const double OneThreeHundredthsOfASecond = 3.333333;

        /// <summary>
        /// Generates a new globally unique identifier (GUID) based on the current time.
        /// </summary>
        /// <returns>The new, sequential <see cref="Guid">GUID</see>.</returns>
        /// <remarks>The computed <see cref="Guid">GUID</see> is optimized to avoid index fragmentation in relational databases.</remarks>
        public static Guid NewSequentialId() => NewGuid().MakeSequential( UtcNow );

        /// <summary>
        /// Generates a new globally unique identifier (GUID) based on the specified time.
        /// </summary>
        /// <param name="now">The current <see cref="DateTime">date and time</see> used to generate the GUID.</param>
        /// <returns>The new, sequential <see cref="Guid">GUID</see>.</returns>
        /// <remarks>The computed <see cref="Guid">GUID</see> is optimized to avoid index fragmentation in relational databases.</remarks>
        public static Guid NewSequentialId( DateTime now ) => NewGuid().MakeSequential( now );

        static Guid MakeSequential( this Guid guid, DateTime now )
        {
            // REF: http://www.informit.com/articles/article.aspx?p=25862
            var bytes = guid.ToByteArray();
            var days = GetBytes( FromTicks( now.Ticks - TicksFromJanuarayFirst1900 ).Days );
            var milliseconds = GetBytes( (long) ( now.TimeOfDay.TotalMilliseconds / OneThreeHundredthsOfASecond ) );

            Reverse( days );
            Reverse( milliseconds );
            Copy( days, 2, bytes, 10, 2 );
            Copy( milliseconds, 4, bytes, 12, 4 );

            return new Guid( bytes );
        }

        /// <summary>
        /// Generates a new globally unique identifier (GUID) based on the specified string.
        /// </summary>
        /// <param name="text">The string to convert to a GUID.</param>
        /// <returns>The generated <see cref="Guid">GUID</see>.</returns>
        /// <remarks>The <see cref="Guid">GUID</see> is generated using the algorithm defined by <a href="http://www.rfc-base.org/rfc-4122.html">RFC 4122</a>.</remarks>
        public static Guid FromString( string text )
        {
            if ( string.IsNullOrEmpty( text ) )
            {
                return Guid.Empty;
            }

            // REF: http://www.rfc-base.org/rfc-4122.html
            var buffer = BigEndianUnicode.GetBytes( text );
            var sha1 = new Sha1ForRfc4122();

            sha1.Append( buffer );
            Resize( ref buffer, 16 );
            sha1.Finish( buffer );

            // set high 4 bits of octet 7 to 5 per RFC 4122
            buffer[7] = unchecked((byte) ( ( buffer[7] & 0x0F ) | 0x50 ));

            return new Guid( buffer );
        }

        /// <summary>
        /// Generates a new globally unique identifier (GUID) based on the specified data.
        /// </summary>
        /// <param name="data">An arbitrary array of data elements.</param>
        /// <returns>The generated <see cref="Guid">GUID</see>.</returns>
        /// <remarks>The <see cref="Guid">GUID</see> is generated by concatenating the data elements in their string representations and
        /// subsequently using the algorithm defined by <a href="http://www.rfc-base.org/rfc-4122.html">RFC 4122</a>.</remarks>
        public static Guid Create( params object[] data )
        {
            var bytes = UTF8.GetBytes( Concat( data ) );
            using var md5 = CreateHash( MD5 );

            md5.AppendData( bytes );
            return new Guid( md5.GetHashAndReset() );
        }
    }
}